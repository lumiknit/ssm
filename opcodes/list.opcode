; Opcode List for SSM
; This is a comment line

; Register
; ip: instruction pointer
; sp: stack pointer
; bp: base pointer
; ap: application pointer
;
; Note:
; - [sp .. bp - 1] is stack frame
; - [bp] is a function
; - [bp + 1 .. ap - 1] is a function's arguments
; 

; Types:
; ixx - signed int (e.g. i16 = 16-bit signed int)
; uxx - unsigned int (e.g. u16 = 16-bit unsigned int)
; fxx - float (e.g. f32 = 32-bit float)
; oxx - offset of instruction (e.g. o16 = 16-bit offset)
;       In assembly it takes the form of a label
; b0  - Sequence of bytes
;       In assembly it takes the form of string

; Format
; OP arg1:type arg2:type ...
; OP: [A-Z]+
; argx: [a-z_]+
; type: [a-z][0-9]+

; -- MAGIC
NOP ; do nothing
MAGIC instr:u32
FFI instr:u32

; -- STACK
POP n:u16 ; pop n elements from stack

PUSH idx:u16 ; push [sp + idx]
PUSHI val:i32 ; push signed int
PUSHU val:u32 ; push unsigned int
PUSHF val:f32 ; push float
PUSHFN fn:o32 ; push function pointer

PUSHGLOBAL idx:u32 ; push global variable

; -- TUPLE

PUSHTAG idx:u16 ; push a tag at [idx]
PUSHLEN idx:u16 ; push a length at [idx]
PUSHELEM idx:u16 jdx:u16 ; push an element at [idx] at [jdx]

; -- CALL
APP argc:u16 ; call function at [bp]
TAIL argc:u16 ; tail call function at [bp]
RET ; return from function

; -- ARITHMETIC
ADD ; add two elements on top of stack
SUB ; subtract two elements on top of stack
MUL ; multiply two elements on top of stack
DIV ; divide two elements on top of stack
MOD ; modulo two elements on top of stack

; -- COMPARISON
EQ ; compare two elements on top of stack
NE ; compare two elements on top of stack
LT ; compare two elements on top of stack
LE ; compare two elements on top of stack
GT ; compare two elements on top of stack
GE ; compare two elements on top of stack

; -- LOGIC

AND ; logical and two elements on top of stack
OR ; logical or two elements on top of stack
NOT ; logical not two elements on top of stack


; -- BRANCH

JMP o:o32 ; jump to offset
BEQ o:o32 ; branch if equal
BNE o:o32 ; branch if not equal
BLT o:o32 ; branch if less than

JMPTBL n:u16 ; jump to offset in table

; -- LITERAL MARKER
FN argc:u16
LONG len:u32 bytes:b0