{"metadata":{"name":"ssm-opcodes","version":"0.1.0"},"types":{"u16":{"type":"uint","bytes":2},"u32":{"type":"uint","bytes":4},"i32":{"type":"int","bytes":4},"f32":{"type":"float","bytes":4},"g32":{"type":"global","bytes":4},"o16":{"type":"offset","bytes":2},"o32":{"type":"offset","bytes":4},"b32":{"type":"array","bytes":4,"elem":{"type":"uint","bytes":1}},"j32":{"type":"array","bytes":4,"elem":{"type":"offset","bytes":4}},"m16":{"type":"magic","bytes":2}},"opcodes":[{"name":"NOP","args":[],"desc":"Do Nothing","c_impl":""},{"name":"POP","args":[{"name":"count","type":"u16"}],"desc":"Pop count items from the stack","c_impl":"reg.sp += count;"},{"name":"PUSH","args":[{"name":"off","type":"u16"}],"desc":"Push [sp + off_sp]"},{"name":"PUSHBP","args":[{"name":"off_bp","type":"u16"}],"desc":"Push [bp - off_bp]"},{"name":"PUSHAP","args":[{"name":"off_ap","type":"u16"}],"desc":"Push [ap + off_ap]"},{"name":"POPSET","args":[{"name":"off_sp","type":"u16"}],"desc":"Pop and set into [sp + off_sp]"},{"name":"PUSHI","args":[{"name":"value","type":"i32"}],"desc":"Push integer literal"},{"name":"PUSHF","args":[{"name":"value","type":"f32"}],"desc":"Push float literal"},{"name":"PUSHFN","args":[{"name":"fn_off","type":"o32"}],"desc":"Create a function at (ip + fn_off) with no captures. Note that (ip + fn_off) must be aligned by 2."},{"name":"PUSHGLOBAL","args":[{"name":"global","type":"g32"}],"desc":"Push index-th global"},{"name":"POPSETGLOBAL","args":[{"name":"global","type":"g32"}],"desc":"Pop and set into index-th global"},{"name":"PUSHISLONG","args":[{"name":"off","type":"u16"}],"desc":"Check [sp + off] is a long tuple."},{"name":"TUP","args":[{"name":"tag","type":"u16"},{"name":"count","type":"u16"}],"desc":"Create a short tuple with tag and count items."},{"name":"PUSHTAG","args":[{"name":"off","type":"u16"}],"desc":"Push tag of [sp + off]"},{"name":"PUSHLEN","args":[{"name":"off","type":"u16"}],"desc":"Push length of [sp + off]"},{"name":"PUSHELEM","args":[{"name":"off","type":"u16"},{"name":"index","type":"u16"}],"desc":"Push index-th element of [sp + off]"},{"name":"LONG","args":[{"name":"bytes","type":"b32"}],"desc":"Create a long tuple with bytes."},{"name":"POPSETBYTE","args":[{"name":"off","type":"u16"}],"desc":"Set [sp + off][sp + 1] = [sp], then pop 2 values"},{"name":"PUSHLONGLEN","args":[{"name":"off","type":"u16"}],"desc":"Push length of [sp + off]"},{"name":"PUSHBYTE","args":[{"name":"off","type":"u16"}],"desc":"Set [sp] = [sp + off][sp]"},{"name":"JOIN","args":[],"desc":"Pop 2 values and push joined value [sp] ++ [sp + 1]"},{"name":"SUBLONG","args":[],"desc":"Pop 3 values and push [sp + 2][[sp] .. [sp + 1]]"},{"name":"LONGCMP","args":[],"desc":"Pop 2 values and push [sp] <=> [sp + 1] (-1 if <, 0 if ==, 1 if >)"},{"name":"APP","aligned":"right","args":[{"name":"count","type":"u16"}],"desc":"Repeat applying a closure at [sp] and args [sp + 1 .. sp + count] until all args are consumed. If some args are left, they are packed as a closure."},{"name":"RET","args":[{"name":"off","type":"u16"}],"desc":"Return with the return value [sp + off]"},{"name":"RETAPP","aligned":"right","args":[{"name":"count","type":"u16"}],"desc":"Tailcall. Call and return the value."},{"name":"INTADD","args":[],"desc":"Pop 2 values and push [sp] + [sp + 1]"},{"name":"INTSUB","args":[],"desc":"Pop 2 values and push [sp] - [sp + 1]"},{"name":"INTMUL","args":[],"desc":"Pop 2 values and push [sp] * [sp + 1]"},{"name":"UINTMUL","args":[],"desc":"Pop 2 values and push [sp] * [sp + 1]"},{"name":"INTDIV","args":[],"desc":"Pop 2 values and push [sp] / [sp + 1]"},{"name":"UINTDIV","args":[],"desc":"Pop 2 values and push [sp] / [sp + 1]"},{"name":"INTMOD","args":[],"desc":"Pop 2 values and push [sp] % [sp + 1]"},{"name":"UINTMOD","args":[],"desc":"Pop 2 values and push [sp] % [sp + 1]"},{"name":"INTUNM","args":[],"desc":"Pop 1 value and push -[sp]"},{"name":"INTSHL","args":[],"desc":"Pop 2 values and push [sp] << [sp + 1]"},{"name":"INTSHR","args":[],"desc":"Pop 2 values and push [sp] >> [sp + 1]"},{"name":"UINTSHR","args":[],"desc":"Pop 2 values and push [sp] >> [sp + 1]"},{"name":"INTAND","args":[],"desc":"Pop 2 values and push [sp] & [sp + 1]"},{"name":"INTOR","args":[],"desc":"Pop 2 values and push [sp] | [sp + 1]"},{"name":"INTXOR","args":[],"desc":"Pop 2 values and push [sp] ^ [sp + 1]"},{"name":"INTNEG","args":[],"desc":"Pop 1 value and push ~[sp]"},{"name":"INTLT","args":[],"desc":"Pop 2 values and push [sp] < [sp + 1]"},{"name":"INTLE","args":[],"desc":"Pop 2 values and push [sp] <= [sp + 1]"},{"name":"FLOATADD","args":[],"desc":"Pop 2 values and push [sp] + [sp + 1]"},{"name":"FLOATSUB","args":[],"desc":"Pop 2 values and push [sp] - [sp + 1]"},{"name":"FLOATMUL","args":[],"desc":"Pop 2 values and push [sp] * [sp + 1]"},{"name":"FLOATDIV","args":[],"desc":"Pop 2 values and push [sp] / [sp + 1]"},{"name":"FLOATUNM","args":[],"desc":"Pop 1 value and push -[sp]"},{"name":"FLOATLT","args":[],"desc":"Pop 2 values and push [sp] < [sp + 1]"},{"name":"FLOATLE","args":[],"desc":"Pop 2 values and push [sp] <= [sp + 1]"},{"name":"EQ","args":[],"desc":"Pop 2 values and push [sp] == [sp + 1]"},{"name":"NE","args":[],"desc":"Pop 2 values and push [sp] != [sp + 1]"},{"name":"JMP","args":[{"name":"off","type":"o32"}],"desc":"Jump to (ip + off)"},{"name":"BEZ","args":[{"name":"off","type":"o16"}],"desc":"Pop 1 value and jump to (ip + off) if [sp] == 0"},{"name":"BNE","args":[{"name":"off","type":"o16"}],"desc":"Pop 1 value and jump to (ip + off) if [sp] != 0"},{"name":"BTAG","args":[{"name":"tag","type":"u16"},{"name":"off","type":"o16"}],"desc":"If the tag of [sp] is tag, jump to (ip + off)"},{"name":"JTAG","args":[{"name":"jump_table","type":"j32"}],"desc":"Jump to (ip + jump_table[tag of [sp]])"},{"name":"MAGIC","args":[{"name":"magic","type":"m16"}],"desc":"Invoke magic"},{"name":"XFN","aligned":"left","args":[{"name":"argc","type":"u16"},{"name":"stack_size","type":"u16"}],"desc":"Function header. Argc is the number of arguments, stack size is the maximum size need to run functions. Note that ip of xfn must be aligned by 2."},{"name":"HEADER","args":[{"name":"version","type":"u32"},{"name":"chunk_size","type":"u32"},{"name":"global_offset","type":"u32"},{"name":"global_count","type":"u32"}],"desc":"Chunk header. Only one header is allowed & required for each chunk, and it must be the first instruction. When the chunk is loaded, check the correctness using arguments. When the chunk is executed, the header is ignored and push ip=0 as a return address. When program return to this header, VM will be halted."}],"magics":[{"name":"NOP","desc":"No operation"},{"name":"HALT","desc":"Pop a VM and halt it"},{"name":"NEWVM","desc":"Push a new VM"},{"name":"NEWPROCESS","desc":"Push a new VM in a new thread/process"},{"name":"VMSELF","desc":"Push current VM"},{"name":"VMPARENT","desc":"Push parent VM"},{"name":"DUP","desc":"Duplicate VM and process. Push each other VM."},{"name":"GLOBALC","desc":"Pop a VM and push the global count of the VM"},{"name":"EXECUTE","desc":"Pop a bytes value, pop a VM and execute the bytes in the VM"},{"name":"HALTED","desc":"Pop a VM and push true if it is halted"},{"name":"SENDMSG","desc":"Pop a message, pop a VM and send the message to the VM"},{"name":"HASMSG","desc":"Push true if there is a message in the message queue"},{"name":"RECVMSG","desc":"Push the message in the message queue. If there is no message, pend"},{"name":"EVAL","desc":"Pop the bytecodes and run it. After running the bytecodes, push the result and return to the original position"},{"name":"FOPEN","desc":"Pop a string and open the file. Push the file handle"},{"name":"FCLOSE","desc":"Pop a file handle and close the file"},{"name":"FFLUSH","desc":"Pop a file handle and flush the file"},{"name":"FREAD","desc":"Pop a file handle and read the file. Push the bytes"},{"name":"FWRITE","desc":"Pop a bytes value, pop a file handle and write the bytes to the file"},{"name":"FTELL","desc":"Pop a file handle and push the current position of the file"},{"name":"FSEEK","desc":"Pop a file handle, pop a position and seek the file to the position"},{"name":"FEOF","desc":"Pop a file handle and push true if the file is at the end"},{"name":"STDREAD","desc":"Read from stdin. Push the bytes"},{"name":"STDWRITE","desc":"Pop a bytes value and write to stdout"},{"name":"STDERROR","desc":"Pop a bytes value and write to stderr"},{"name":"REMOVE","desc":"Pop a string and remove the file"},{"name":"RENAME","desc":"Pop a string, pop a string and rename the file"},{"name":"TMPFILE","desc":"Push a file handle of a temporary file"},{"name":"READFILE","desc":"Pop a string and read the file. Push the bytes"},{"name":"WRITEFILE","desc":"Pop a bytes value, pop a string and write the bytes to the file"},{"name":"MALLOC","desc":"Pop a size and allocate memory. Push the pointer"},{"name":"FREE","desc":"Pop a pointer and free the memory"},{"name":"SRAND","desc":"Pop a seed and set the seed of the random number generator"},{"name":"RAND","desc":"Push a random number"},{"name":"ARG","desc":"Push the argument of the VM"},{"name":"ENV","desc":"Pop a string and push the environment variable"},{"name":"EXIT","desc":"Pop a status and exit the VM"},{"name":"SYSTEM","desc":"Pop a string and execute the command"},{"name":"PI","desc":"Push PI"},{"name":"E","desc":"Push E"},{"name":"ABS","desc":"Pop a value and push the absolute value"},{"name":"SIN","desc":"Pop a value and push the sine value"},{"name":"COS","desc":"Pop a value and push the cosine value"},{"name":"TAN","desc":"Pop a value and push the tangent value"},{"name":"ASIN","desc":"Pop a value and push the arc sine value"},{"name":"ACOS","desc":"Pop a value and push the arc cosine value"},{"name":"ATAN","desc":"Pop a value and push the arc tangent value"},{"name":"ATAN2","desc":"Pop a value, pop a value and push the arc tangent value"},{"name":"EXP","desc":"Pop a value and push the exponential value"},{"name":"LOG","desc":"Pop a value and push the natural logarithm value"},{"name":"LOG10","desc":"Pop a value and push the base 10 logarithm value"},{"name":"LN","desc":"Pop a value and push the natural logarithm value"},{"name":"MODF","desc":"Pop a value and push the fractional part and the integer part"},{"name":"POW","desc":"Pop a value, pop a value and push the power value"},{"name":"SQRT","desc":"Pop a value and push the square root value"},{"name":"CEIL","desc":"Pop a value and push the ceiling value"},{"name":"FLOOR","desc":"Pop a value and push the floor value"},{"name":"FABS","desc":"Pop a value and push the absolute value"},{"name":"FMOD","desc":"Pop a value, pop a value and push the remainder value"},{"name":"CLOCK","desc":"Push the clock value"},{"name":"TIME","desc":"Push the time value"},{"name":"CWD","desc":"Push the current working directory"},{"name":"ISDIR","desc":"Pop a string and push true if the path is a directory"},{"name":"ISFILE","desc":"Pop a string and push true if the path is a file"},{"name":"MKDIR","desc":"Pop a string and make a directory"},{"name":"RMDIR","desc":"Pop a string and remove a directory"},{"name":"CHDIR","desc":"Pop a string and change the current working directory"},{"name":"FILES","desc":"Pop a string and push the files in the directory"},{"name":"JOINPATH","desc":"Pop a string, pop a string and join the paths"},{"name":"FFILOAD","desc":"Pop a string and load the shared library"},{"name":"OS","desc":"Push the OS name"},{"name":"ARCH","desc":"Push the architecture name"},{"name":"ENDIAN","desc":"Push the endianess"},{"name":"VERSION","desc":"Push the version of the VM"}]}
