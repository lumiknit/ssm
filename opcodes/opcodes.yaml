# Opcode List for SSM
# This is a comment line

# Register
# ip: instruction pointer
# sp: stack pointer
# bp: base pointer
# ap: application pointer
#
# Note:
# - [sp .. bp - 1] is stack frame
# - [bp] is a function
# - [bp + 1 .. ap - 1] is a function's arguments
# 

# Types:
# ixx - signed int (e.g. i16 = 16-bit signed int)
# uxx - unsigned int (e.g. u16 = 16-bit unsigned int)
# fxx - float (e.g. f32 = 32-bit float)
# oxx - offset of instruction (e.g. o16 = 16-bit offset)
#       In assembly it takes the form of a label
# b0  - Sequence of bytes
#       In assembly it takes the form of string

# Format
# OP arg1:type arg2:type ...
# OP: [A-Z]+
# argx: [a-z_]+
# type: [a-z][0-9]+

opcodes:
# -- MAGIC
- NOP: [] # do nothing
- MAGIC:
  - instr: u32
- FFI:
  - instr: u32

# -- STACK
- POP: # pop n elements from stack
  - n: u16 
- PUSH: # push [sp + idx]
  - idx: u16
- PUSHI: # push signed int
  - val: i32
- PUSHU: # push unsigned int
  - val: u32
- PUSHF: # push float
  - val: f32
- PUSHFN: # push function pointer
  - fn: o32

- PUSHGLOBAL: # push global variable
  - idx: u32

# -- TUPLE

- PUSHTAG: # push a tag at [idx]
  - idx: u16
- PUSHLEN: # push a length at [idx]
  - idx: u16
- PUSHELEM: # push an element at [idx] at [jdx]
  - idx: u16
  - jdx: u16
- MAKETUP: # make a tuple
  - tag: u16
  - len: u16

# -- CALL
- APP: # call function at [bp]
  - argc: u16
- TAIL: # tail call function at [bp]
  - argc: u16
- RET: # return from function

# -- ARITHMETIC
- ADD: [] # add two elements on top of stack
- SUB: [] # subtract two elements on top of stack
- MUL: [] # multiply two elements on top of stack
- DIV: [] # divide two elements on top of stack
- MOD: [] # modulo two elements on top of stack

# -- COMPARISON
- EQ: [] # compare two elements on top of stack
- NE: [] # compare two elements on top of stack
- LT: [] # compare two elements on top of stack
- LE: [] # compare two elements on top of stack

# -- LOGIC

- AND: [] # logical and two elements on top of stack
- OR: [] # logical or two elements on top of stack
- NOT: [] # logical not two elements on top of stack

# -- BRANCH

- JMP: # jump to offset
  - offset: o32
- BEQ: # branch if equal
  - offset: o32
- BNE: # branch if not equal
  - offset: o32

# -- LITERAL MARKER
- FN: # function
  - arc: u16
- LONG: # long tuples
  - len: u32
  - bytes: b0
