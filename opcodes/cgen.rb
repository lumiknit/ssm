#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# cgen.rb
# SSM C Code Generator
# Author: lumiknit

require_relative 'spec'
$spec = SSM::spec

# --- Path Config

script_path = File.dirname(__FILE__)
$root_path = File.expand_path(File.join(script_path, ".."))
$src_path = File.join($root_path, "src")
$include_path = File.join($root_path, "include")

# --- Opcode Header

def gen_opcode_hd
  filename = "ssm_ops"
  path = File.join($include_path, filename + ".h")
  
  ops = []
  $spec.ops.each do |name, o|
    ops << "#define SSM_OP_#{o.name.upcase} ((ssmOp)#{o.index})"
  end

  magics = []
  $spec.magics.each do |name, m|
    magics << "#define SSM_MAGIC_#{m.name.upcase} #{m.index}"
  end

  File.write path, <<~EOF
    // Generated by /opcode/cgen.rb

    #ifndef #{filename.upcase}_H
    #define #{filename.upcase}_H

    #include <stdint.h>

    typedef uint8_t ssmOp;

    #{$spec.ops_arr
      .map{|x| "#define SSM_OP_#{x.name.upcase} ((ssmOp)#{x.index})"}
      .join("\n")}

    typedef uint16_t ssmMagic;
    #{$spec.magic_arr
      .map{|x| "#define SSM_MAGIC_#{x.name.upcase} ((ssmMagic)#{x.index})"}
      .join("\n")}

    #endif
  EOF
end

# --- C Jump Table
def gen_opcode_jmptbl
  path = File.join $src_path, "ssm_vm_jmptbl.c"

  File.write path, <<~EOF
    // Generated by /opcode/cgen.rb
    {
    #{$spec.ops_arr
        .map{|x| "  L_op_#{x.name.upcase},"}
        .join("\n")}
    }
  EOF
end

# --- C VM Opcode Switch
def gen_opcode_switch
  path = File.join $src_path, "ssm_vm_switch.c"

  lines = $spec.ops_arr.map do |o|
    open = "OP(#{o.name.upcase}) {"
    args = []
    p = 1
    p_extra = "";
    o.args.each do |arg|
      name = arg.name
      if arg.type.is_a? SSM::ArrayType
        len_type = arg.type.len_type
        elem_type = arg.type.elem_type
        args << "register #{len_type.ctype} #{arg.name}_len = read_#{len_type.ctype}(ip + #{p}#{p_extra});"
        p += len_type.bytes
        args << "register #{elem_type.ctype}* #{arg.name} = (#{elem_type.ctype}*)(ip + #{p}#{p_extra});"
        args << "// Use read_#{elem_type.ctype}(&#{arg.name} + IDX) to get elements"
        p_extra += " + #{arg.name}_len * sizeof(#{elem_type.ctype})"
      else
        type = arg.type.type
        args << "register #{type.ctype} #{arg.name} = read_#{type.ctype}(ip + #{p}#{p_extra});"
        p += type.bytes
      end
    end
    body = "unimplemented();"
    close = "NEXT(#{p}#{p_extra});\n}"
    open + "\n" + (args + [body, close]).map{|x| "  #{x}"}.join("\n")
  end

  File.write path, <<~EOF
    // Generated by /opcode/cgen.rb
    #{lines.join "\n"}
  EOF
end

# --- CLI

gen_opcode_hd
gen_opcode_jmptbl
gen_opcode_switch